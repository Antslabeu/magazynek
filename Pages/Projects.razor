@page "/projects"

@using Magazynek.Entities
@using Magazynek.Services

@inject IProductService ProductService
@inject IProjectService ProjectService
@inject IShippingEntryService ShippingEntryService


<PageTitle>Projekty</PageTitle>

<div class="container mt-4">
    <div class="mb-3 searcher gap-4">
        <input class="form-control bg-dark text-light" type="text" placeholder="Szukaj..." @bind="searchTerm" />
        <button class="btn btn-success" @onclick="AddNew">
            <i class="bi bi-plus-circle"></i>
        </button>
    </div>
    <table class="table table-dark table-striped table-hover align-middle">
        <thead class="table-dark border-bottom border-light">
            <tr >
                <th rowspan="2" class="align-middle">Nazwa</th>
                <th rowspan="2" class="align-middle text-center" style="width:120px">Kompletność</th>
                <th colspan="2" class="align-middle text-center">Wartość [PLN]</th>
                <th rowspan="2" class="align-middle button-th">Akcje</th>
            </tr>
            <tr>
                <th style="width:80px" class="text-center">Brakująca</th>
                <th style="width:80px" class="text-center">Całkowita</th>
            </tr>
        </thead>
        <tbody>
            @foreach(Project project in filteredProjects)
            {
                <tr>
                    <td>@project.name</td>
                    <td class="text-center">@project.GetBoughtItemsPercentReadiness(shippingEntries) %</td>
                    <td class="text-center">@project.GetMissingValue(shippingEntries)</td>
                    <td class="text-center">@project.GetTotalValue(shippingEntries).ToString(format: "0.00")</td>
                    <td>
                        <button class="btn btn-light" @onclick="() => Edit(project)">
                            <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-danger" @onclick="() => Remove(project)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                </tr>
                <tr>
                    <td colspan="5" class="bom-view">
                        <div class="container text-center">
                            <h5>Elementy BOM</h5>
                            <div class="row row-cols-4">
                                @foreach(ProjectItem item in project.items)
                                {
                                    ShippingEntryViewModel? entry = shippingEntries.FirstOrDefault(se => se.product.id == item.itemID);
                                    int availableQty = item.GetAvailableQuantity(shippingEntries);
                                    ProjectItem.ErrorState errorState = ProjectItem.GetErrorState(entry, item.quantity);

                                    <div class="col bom-item @(errorState switch
                                    {
                                        ProjectItem.ErrorState.NotInStockAtAll => "text-danger",
                                        ProjectItem.ErrorState.NotEnoughBought => "text-warning",
                                        _ => "text-success"
                                    })">
                                        <p>@item.product?.name</p>
                                        <p>@availableQty / @item.quantity</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (editingProject != null)
    {
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content text-light bg-dark">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(editingIsNew ? "Dodaj projekt" : "Modyfikuj projekt")
                    </h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editingProject" OnValidSubmit="Save" >
                        <div class="mb-3">
                            <label class="form-label">Nazwa</label>
                            <InputText class="form-control" @bind-Value="editingProject.name" />
                        </div>
                        <div class="mb-3">
                            <span class="form-label">BOM</span>
                            @for(int i = 0; i < editingProject.items.Count; i++)
                            {
                                int index = i;
                                <div class="horizontal gap-3">
                                    <InputSelect class="form-select" @bind-Value="editingProject.items[index].itemID">
                                        <option value="@Guid.Empty">Wybierz produkt</option>
                                        @foreach (Product product in products)
                                        {
                                            <option value="@product.id">@product.name</option>
                                        }
                                    </InputSelect>
                                    <InputNumber class="form-control" @bind-Value="editingProject.items[index].quantity" />
                                    <button type="button" class="btn btn-danger" @onclick="() => editingProject.Removeitem(editingProject.items[index])">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            }
                            <button type="button" class="btn btn-success btn-row-add" @onclick="AddRow"><i class="bi bi-plus-circle"></i></button>
                        </div>
                        
                        <button type="submit" class="btn btn-success"><i class="bi bi-floppy-fill"></i> Zapisz</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    }
</div>

@code {
    private string searchTerm = "";
    private Project? editingProject = null;
    private bool editingIsNew = false;
    private List<Project> projects = new List<Project>();
    private List<Product> products = new List<Product>();
    private List<ShippingEntryViewModel> shippingEntries = new List<ShippingEntryViewModel>();

    private IEnumerable<Project> filteredProjects => string.IsNullOrWhiteSpace(searchTerm)
        ? projects
        : projects.Where(p => p.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    protected override async Task OnParametersSetAsync() {
        projects = await ProjectService.Get();
        products = (await ProductService.Get()).OrderBy(p => p.name).ToList();
        shippingEntries = await ShippingEntryService.GetModels();
    }
    private void CloseEditModal() {
        editingProject = null;
    }
    private void Edit(Project p) {
        editingIsNew = false;
        editingProject = new Project(p);
    }
    private async void Remove(Project p) {
        await ProjectService.Remove(p);
        projects.Remove(p);
        StateHasChanged();
    }
    private void AddNew() {
        editingIsNew = true;
        editingProject = new Project("");
    }
    private void AddRow() {
        if (editingProject == null) return;

        editingProject.AddItem(product: null, quantity: 0);
    }
    private async void Save(EditContext context)
    {
        if(editingProject == null) return;

        Project newOne = await ProjectService.UpdateInfoOrInsertNew(editingProject);

        Project? existingProject = projects.FirstOrDefault(x => x.id == newOne.id);
        if(existingProject == null) projects.Add(newOne);
        else {
            existingProject.name = newOne.name;
            existingProject.SetItems(newOne.items);
        }
        
        editingProject = null;
        StateHasChanged();
    }
}

